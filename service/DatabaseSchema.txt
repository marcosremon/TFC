-- Crear base de datos si no existe
DO $$
BEGIN
   IF NOT EXISTS (
      SELECT FROM pg_database WHERE datname = 'ignasioo'
   ) THEN
      CREATE DATABASE ignasioo;
   END IF;
END$$;

-- Conectar a la base de datos

-- Crear ENUM weekday
DO $$
BEGIN
   IF NOT EXISTS (
      SELECT 1 FROM pg_type WHERE typname = 'weekday'
   ) THEN
      CREATE TYPE weekday AS ENUM (
         'Monday', 'Tuesday', 'Wednesday', 'Thursday',
         'Friday', 'Saturday', 'Sunday'
      );
   END IF;
END$$;

-- Tabla users
CREATE TABLE IF NOT EXISTS users (
    user_id BIGSERIAL PRIMARY KEY,
    dni VARCHAR(9),
    username VARCHAR(100),
    surname VARCHAR(100),
    email VARCHAR(255),
    friend_code TEXT,
    password BYTEA,
    role VARCHAR(20) NOT NULL,
    inscription_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla routines
CREATE TABLE IF NOT EXISTS routines (
    routine_id BIGSERIAL PRIMARY KEY,
    routine_name VARCHAR(100),
    routine_description VARCHAR(500),
    user_id BIGINT NOT NULL,
    CONSTRAINT fk_routines_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Tabla split_days
CREATE TABLE IF NOT EXISTS split_days (
    day_name weekday NOT NULL,
    day_exercises_description TEXT NOT NULL,
    routine_id BIGINT NOT NULL,
    CONSTRAINT fk_split_days_routine FOREIGN KEY (routine_id) REFERENCES routines(routine_id) ON DELETE CASCADE,
    PRIMARY KEY (routine_id, day_name)
);

-- Tabla exercises
CREATE TABLE IF NOT EXISTS exercises (
    exercise_id BIGSERIAL PRIMARY KEY,
    exercise_name VARCHAR(100),
    sets INTEGER,
    reps INTEGER,
    weight DOUBLE PRECISION,
    routine_id BIGINT NOT NULL,
    day_name weekday NOT NULL,
    CONSTRAINT fk_exercises_split_day FOREIGN KEY (routine_id, day_name) REFERENCES split_days(routine_id, day_name) ON DELETE CASCADE
);

-- Tabla user_friends
CREATE TABLE IF NOT EXISTS user_friends (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    friend_id BIGINT NOT NULL,
    CONSTRAINT fk_user_friend_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_friend_friend FOREIGN KEY (friend_id) REFERENCES users(user_id) ON DELETE CASCADE
);