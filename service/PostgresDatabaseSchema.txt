-- Crear secuencias necesarias
CREATE SEQUENCE IF NOT EXISTS exercises_exercise_id_seq;
CREATE SEQUENCE IF NOT EXISTS routines_routine_id_seq;
CREATE SEQUENCE IF NOT EXISTS user_friends_id_seq;
CREATE SEQUENCE IF NOT EXISTS users_user_id_seq;
CREATE SEQUENCE IF NOT EXISTS exercise_progress;

-- Crear tabla users (porque otras dependen de ella)
CREATE TABLE IF NOT EXISTS public.users (
    user_id bigint NOT NULL DEFAULT nextval('users_user_id_seq'::regclass),
    dni character varying(9) COLLATE pg_catalog."default",
    username character varying(100) COLLATE pg_catalog."default",
    surname character varying(100) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    friend_code text COLLATE pg_catalog."default",
    password bytea,
    role character varying(20) COLLATE pg_catalog."default" NOT NULL,
    inscription_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (user_id)
);

-- Crear tabla routines
CREATE TABLE IF NOT EXISTS public.routines (
    routine_id bigint NOT NULL DEFAULT nextval('routines_routine_id_seq'::regclass),
    routine_name character varying(100) COLLATE pg_catalog."default",
    routine_description character varying(500) COLLATE pg_catalog."default",
    user_id bigint NOT NULL,
    CONSTRAINT routines_pkey PRIMARY KEY (routine_id),
    CONSTRAINT fk_routines_user FOREIGN KEY (user_id)
        REFERENCES public.users (user_id) ON UPDATE NO ACTION ON DELETE CASCADE
);

-- Crear tabla split_days
CREATE TABLE IF NOT EXISTS public.split_days (
    routine_id bigint NOT NULL,
    day_name character varying(20) NOT NULL,
    day_exercises_description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT split_days_pkey PRIMARY KEY (routine_id, day_name),
    CONSTRAINT fk_split_days_routine FOREIGN KEY (routine_id)
        REFERENCES public.routines (routine_id) ON UPDATE NO ACTION ON DELETE CASCADE
);

-- Crear tabla exercises
CREATE TABLE IF NOT EXISTS public.exercises (
    exercise_id bigint NOT NULL DEFAULT nextval('exercises_exercise_id_seq'::regclass),
    exercise_name character varying(100) COLLATE pg_catalog."default",
    sets integer,
    reps integer,
    weight double precision,
    routine_id bigint NOT NULL,
    day_name character varying(20) NOT NULL,
    CONSTRAINT exercises_pkey PRIMARY KEY (exercise_id),
    CONSTRAINT fk_exercises_split_day FOREIGN KEY (routine_id, day_name)
        REFERENCES public.split_days (routine_id, day_name) ON UPDATE NO ACTION ON DELETE CASCADE
);

-- Crear tabla user_friends
CREATE TABLE IF NOT EXISTS public.user_friends (
    id bigint NOT NULL DEFAULT nextval('user_friends_id_seq'::regclass),
    user_id bigint NOT NULL,
    friend_id bigint NOT NULL,
    CONSTRAINT user_friends_pkey PRIMARY KEY (id),
    CONSTRAINT fk_user_friend_user FOREIGN KEY (user_id)
        REFERENCES public.users (user_id) ON UPDATE NO ACTION ON DELETE CASCADE,
    CONSTRAINT fk_user_friend_friend FOREIGN KEY (friend_id)
        REFERENCES public.users (user_id) ON UPDATE NO ACTION ON DELETE CASCADE
);

-- O alternativamente, cambiar la definición de la tabla para usar la secuencia existente:
CREATE TABLE IF NOT EXISTS public.exercise_progress
(
    progress_id integer NOT NULL DEFAULT nextval('exercise_progress'::regclass),  -- Usando la secuencia existente
    exercise_id bigint,
    routine_id bigint,
    day_name character varying(20) COLLATE pg_catalog."default",
    sets integer,
    reps integer,
    weight double precision,
    performed_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT exercise_progress_pkey PRIMARY KEY (progress_id),
    CONSTRAINT exercise_progress_exercise_id_fkey FOREIGN KEY (exercise_id)
        REFERENCES public.exercises (exercise_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS public.exercise_progress
    OWNER to postgres;